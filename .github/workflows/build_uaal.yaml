name: "Build Unity as a Library"


on:
  workflow_call:
    secrets:
      UNITY_USERNAME:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_SERIAL:
        required: true
      GH_REPO:
        required: false
      GH_USER:
        required: false
    inputs:
      tag:
        description: Git tag that is pushed
        type: string
        required: false
      publish:
        description: Publish the package to maven repository
        type: boolean
        required: true
        default: false

jobs:
  build_unity_library:
    permissions:
      packages: write # to create package maven package
      contents: read # to read the unity project
    runs-on: [ self-hosted, Linux, X64 ]
    container: unityci/editor:2022.3.14f1-android-3
    steps:
      # unityci image doesn't have node installed and it's required for github actions
      - name: Setup node js
        run: |
          apt-get -qq update && apt-get -qq -o=Dpkg::Use-Pty=0 --no-install-recommends install gnupg1
          echo 'deb http://ppa.launchpad.net/git-core/ppa/ubuntu bionic main' > /etc/apt/sources.list.d/git.list
          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E1DD270288B4E6030699E45FA1715D88E1DF1F24
          apt-get -qq update && apt-get install -qq -o=Dpkg::Use-Pty=0 --no-install-recommends git


      - uses: actions/checkout@v3
        with:
          lfs: true


      - uses: actions/cache@v3
        # skip during local actions tests
        if: ${{ !github.event.act }}
        with:
          path: MazdaIVI/Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-


      - name: Activate License
        continue-on-error: true
        env:
          UNITY_USERNAME: ${{ secrets.UNITY_USERNAME }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        run: |
          unity-editor -batchmode -serial $UNITY_SERIAL -username $UNITY_USERNAME -password $UNITY_PASSWORD


      - name: Build UAAL
        run: |
          unity-editor -batchmode -logfile /dev/stdout -quit -projectPath MazdaIVI -executeMethod BuildScript.BuildUAAL


      # Build Android Library and publish it to maven repository
      # 1. install gradle (has to be inside unity editor container because that is where all sdks are installed)
      # 2. copy build.uaal.gradle to the generated unityLibrary (this way we can add new configuration without changing the original build.gradle)
      # 3. add build.uaal.gradle import to build.gradle (add an apply statement at the top of the file)
      # 4. build unityLibrary so that it generates the aar files
      # 5. publish generated aar files to maven repository (github registry)
      # TODO: we can separate the build and publish steps into two jobs if needed but for now it's fine
      - name: Build & Publish Android Library
        if: ${{ inputs.publish }}
        env:
          GH_REPO: ${{ secrets.GH_REPO }}
          GH_USER: ${{ secrets.GH_USER }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # default values for android sdk and ndk (depends on unity version)
          ANDROID_CMDLINE_TOOLS_PATH: /opt/unity/Editor/Data/PlaybackEngines/AndroidPlayer/SDK/cmdline-tools/6.0
          ANDROID_SDK_ROOT: /opt/unity/Editor/Data/PlaybackEngines/AndroidPlayer/SDK
          ANDROID_HOME: /opt/unity/Editor/Data/PlaybackEngines/AndroidPlayer/SDK
          ANDROID_NDK_HOME: /opt/unity/Editor/Data/PlaybackEngines/AndroidPlayer/NDK
          JAVA_HOME: /opt/unity/Editor/Data/PlaybackEngines/AndroidPlayer/OpenJDK
          # default version unity 2022.3.5f1 uses change if needed
          GRADLE_VERSION: 7.2
          TAG: ${{ inputs.tag }}
        run: |
          wget -c https\://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip -P /tmp
          unzip -d /opt/gradle /tmp/gradle-${GRADLE_VERSION}-bin.zip
          chmod +x /opt/gradle/gradle-${GRADLE_VERSION}/bin/gradle
          cp bin/devops/Android/build.uaal.gradle MazdaIVI/androidBuild/unityLibrary/build.uaal.gradle
          sed -i "1s/^/apply from: 'build.uaal.gradle'\n/" MazdaIVI/androidBuild/unityLibrary/build.gradle
          /opt/gradle/gradle-${GRADLE_VERSION}/bin/gradle build --daemon -p MazdaIVI/androidBuild
          export PACKAGE_VERSION=$(echo ${TAG} | sed 's/unity\///g' | sed 's/[^0-9.]*\([0-9.]*\).*/\1/')
          /opt/gradle/gradle-${GRADLE_VERSION}/bin/gradle debugProp  --daemon -p MazdaIVI/androidBuild -Pversion=${PACKAGE_VERSION}
          /opt/gradle/gradle-${GRADLE_VERSION}/bin/gradle publish --daemon -p MazdaIVI/androidBuild -Pversion=${PACKAGE_VERSION}


      - name: Return License
        if: always()
        continue-on-error: true
        env:
          UNITY_USERNAME: ${{ secrets.UNITY_USERNAME }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        run: |
          unity-editor -quit -batchmode -returnlicense -username $UNITY_USERNAME -password $UNITY_PASSWORD
